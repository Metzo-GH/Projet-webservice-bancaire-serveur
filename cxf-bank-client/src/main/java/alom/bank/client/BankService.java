package alom.bank.client;

import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.RequestWrapper;
import jakarta.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 4.0.5
 * 2024-09-25T22:58:50.968+02:00
 * Generated source version: 4.0.5
 *
 */
@WebService(targetNamespace = "http://service.server.bank.alom/", name = "BankService")
@XmlSeeAlso({ObjectFactory.class})
public interface BankService {

    @WebMethod
    @RequestWrapper(localName = "recupererCompte", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.RecupererCompte")
    @ResponseWrapper(localName = "recupererCompteResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.RecupererCompteResponse")
    @WebResult(name = "return", targetNamespace = "")
    public alom.bank.client.Compte recupererCompte(

        @WebParam(name = "client", targetNamespace = "")
        alom.bank.client.Client client,
        @WebParam(name = "typeCompte", targetNamespace = "")
        alom.bank.client.TypeCompte typeCompte
    ) throws CompteInexistantException_Exception, TypeCompteInvalideException_Exception, ClientInexistantException_Exception;

    @WebMethod
    @RequestWrapper(localName = "creerCompte", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.CreerCompte")
    @ResponseWrapper(localName = "creerCompteResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.CreerCompteResponse")
    @WebResult(name = "return", targetNamespace = "")
    public alom.bank.client.Compte creerCompte(

        @WebParam(name = "client", targetNamespace = "")
        alom.bank.client.Client client,
        @WebParam(name = "typeCompte", targetNamespace = "")
        alom.bank.client.TypeCompte typeCompte
    ) throws TypeCompteInvalideException_Exception, CompteDejaExistantException_Exception, ClientInexistantException_Exception;

    @WebMethod
    @RequestWrapper(localName = "creerClient", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.CreerClient")
    @ResponseWrapper(localName = "creerClientResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.CreerClientResponse")
    @WebResult(name = "return", targetNamespace = "")
    public alom.bank.client.Client creerClient(

        @WebParam(name = "prenom", targetNamespace = "")
        java.lang.String prenom,
        @WebParam(name = "nom", targetNamespace = "")
        java.lang.String nom,
        @WebParam(name = "DateNaissance", targetNamespace = "")
        javax.xml.datatype.XMLGregorianCalendar dateNaissance
    ) throws ClientDejaExistantException_Exception;

    @WebMethod
    @RequestWrapper(localName = "retirerArgent", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.RetirerArgent")
    @ResponseWrapper(localName = "retirerArgentResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.RetirerArgentResponse")
    @WebResult(name = "return", targetNamespace = "")
    public double retirerArgent(

        @WebParam(name = "compte", targetNamespace = "")
        alom.bank.client.Compte compte,
        @WebParam(name = "montant", targetNamespace = "")
        double montant
    ) throws MontantInvalideException_Exception, CompteInexistantException_Exception, DecouvertNonAutoriseException_Exception;

    @WebMethod
    @RequestWrapper(localName = "ajouterArgent", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.AjouterArgent")
    @ResponseWrapper(localName = "ajouterArgentResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.AjouterArgentResponse")
    @WebResult(name = "return", targetNamespace = "")
    public double ajouterArgent(

        @WebParam(name = "compte", targetNamespace = "")
        alom.bank.client.Compte compte,
        @WebParam(name = "somme", targetNamespace = "")
        double somme
    ) throws CompteInexistantException_Exception, IllegalArgumentException_Exception;

    @WebMethod
    @RequestWrapper(localName = "recupererClient", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.RecupererClient")
    @ResponseWrapper(localName = "recupererClientResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.RecupererClientResponse")
    @WebResult(name = "return", targetNamespace = "")
    public alom.bank.client.Client recupererClient(

        @WebParam(name = "prenom", targetNamespace = "")
        java.lang.String prenom,
        @WebParam(name = "nom", targetNamespace = "")
        java.lang.String nom,
        @WebParam(name = "DateNaissance", targetNamespace = "")
        javax.xml.datatype.XMLGregorianCalendar dateNaissance
    ) throws ClientInexistantException_Exception;

    @WebMethod
    @RequestWrapper(localName = "connaitreSolde", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.ConnaitreSolde")
    @ResponseWrapper(localName = "connaitreSoldeResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.ConnaitreSoldeResponse")
    @WebResult(name = "return", targetNamespace = "")
    public double connaitreSolde(

        @WebParam(name = "compte", targetNamespace = "")
        alom.bank.client.Compte compte
    ) throws CompteInexistantException_Exception;
}
