
package alom.bank.client;

import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.datatype.XMLGregorianCalendar;
import jakarta.xml.ws.RequestWrapper;
import jakarta.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "BankService", targetNamespace = "http://service.server.bank.alom/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface BankService {


    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns alom.bank.client.Compte
     * @throws ClientInexistantException_Exception
     * @throws CompteInexistantException_Exception
     * @throws TypeCompteInvalideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "recupererCompte", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.RecupererCompte")
    @ResponseWrapper(localName = "recupererCompteResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.RecupererCompteResponse")
    public Compte recupererCompte(
        @WebParam(name = "arg0", targetNamespace = "")
        Client arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        TypeCompte arg1)
        throws ClientInexistantException_Exception, CompteInexistantException_Exception, TypeCompteInvalideException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns alom.bank.client.Compte
     * @throws ClientInexistantException_Exception
     * @throws CompteDejaExistantException_Exception
     * @throws TypeCompteInvalideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "creerCompte", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.CreerCompte")
    @ResponseWrapper(localName = "creerCompteResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.CreerCompteResponse")
    public Compte creerCompte(
        @WebParam(name = "arg0", targetNamespace = "")
        Client arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        TypeCompte arg1)
        throws ClientInexistantException_Exception, CompteDejaExistantException_Exception, TypeCompteInvalideException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns alom.bank.client.Client
     * @throws ClientDejaExistantException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "creerClient", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.CreerClient")
    @ResponseWrapper(localName = "creerClientResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.CreerClientResponse")
    public Client creerClient(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        XMLGregorianCalendar arg2)
        throws ClientDejaExistantException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns double
     * @throws MontantInvalideException_Exception
     * @throws CompteInexistantException_Exception
     * @throws DecouvertNonAutoriseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retirerArgent", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.RetirerArgent")
    @ResponseWrapper(localName = "retirerArgentResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.RetirerArgentResponse")
    public double retirerArgent(
        @WebParam(name = "arg0", targetNamespace = "")
        Compte arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        double arg1)
        throws CompteInexistantException_Exception, DecouvertNonAutoriseException_Exception, MontantInvalideException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns double
     * @throws IllegalArgumentException_Exception
     * @throws CompteInexistantException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ajouterArgent", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.AjouterArgent")
    @ResponseWrapper(localName = "ajouterArgentResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.AjouterArgentResponse")
    public double ajouterArgent(
        @WebParam(name = "arg0", targetNamespace = "")
        Compte arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        double arg1)
        throws CompteInexistantException_Exception, IllegalArgumentException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns alom.bank.client.Client
     * @throws ClientInexistantException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "recupererClient", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.RecupererClient")
    @ResponseWrapper(localName = "recupererClientResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.RecupererClientResponse")
    public Client recupererClient(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        XMLGregorianCalendar arg2)
        throws ClientInexistantException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns double
     * @throws CompteInexistantException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "connaitreSolde", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.ConnaitreSolde")
    @ResponseWrapper(localName = "connaitreSoldeResponse", targetNamespace = "http://service.server.bank.alom/", className = "alom.bank.client.ConnaitreSoldeResponse")
    public double connaitreSolde(
        @WebParam(name = "arg0", targetNamespace = "")
        Compte arg0)
        throws CompteInexistantException_Exception
    ;

}
